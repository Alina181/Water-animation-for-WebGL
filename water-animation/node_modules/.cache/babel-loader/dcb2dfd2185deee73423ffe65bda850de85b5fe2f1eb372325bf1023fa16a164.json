{"ast":null,"code":"import * as THREE from 'three';\nimport { Water } from 'three/examples/jsm/objects/Water';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Sky } from 'three/examples/jsm/objects/Sky';\n\n// Сцена и камера\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(55, window.innerWidth / window.innerHeight, 1, 20000);\ncamera.position.set(30, 30, 100);\n\n// Рендерер\nconst renderer = new THREE.WebGLRenderer({\n  antialias: true\n});\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Орбитальные управления\nconst controls = new OrbitControls(camera, renderer.domElement);\n\n// Сфера неба\nconst sky = new Sky();\nsky.scale.setScalar(10000);\nscene.add(sky);\n\n// Вода\nconst waterGeometry = new THREE.PlaneGeometry(10000, 10000);\nconst water = new Water(waterGeometry, {\n  textureWidth: 512,\n  textureHeight: 512,\n  waterNormals: new THREE.TextureLoader().load('https://threejs.org/examples/textures/waternormals.jpg', texture => {\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n  }),\n  alpha: 1.0,\n  sunDirection: new THREE.Vector3(),\n  sunColor: 0xffffff,\n  waterColor: 0x001e0f,\n  distortionScale: 3.7,\n  fog: scene.fog !== undefined\n});\nwater.rotation.x = -Math.PI / 2;\nscene.add(water);\n\n// Круглый объект (сфера) - исправленная версия\nconst sphereGeometry = new THREE.SphereGeometry(5, 32, 32);\nconst sphereMaterial = new THREE.MeshStandardMaterial({\n  color: 0xff0000,\n  roughness: 0.1,\n  metalness: 0.5\n});\nconst sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\nsphere.position.set(0, 3, 0); // Поднимаем сферу выше, чтобы она была видна\nscene.add(sphere);\n\n// Освещение\nconst ambientLight = new THREE.AmbientLight(0x404040);\nscene.add(ambientLight);\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);\ndirectionalLight.position.set(100, 100, 50);\nscene.add(directionalLight);\nconst sun = new THREE.Vector3();\nsun.set(100, 100, 100);\nsky.material.uniforms['sunPosition'].value.copy(sun);\nwater.material.uniforms['sunDirection'].value.copy(sun).normalize();\n\n// Анимация\nfunction animate() {\n  requestAnimationFrame(animate);\n  water.material.uniforms['time'].value += 1.0 / 60.0;\n\n  // Анимация сферы - плавает на поверхности\n  sphere.position.y = 3 + Math.sin(Date.now() * 0.001) * 0.5;\n  controls.update();\n  renderer.render(scene, camera);\n}\nanimate();\n\n// Ресайз окна\nwindow.addEventListener('resize', () => {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n});","map":{"version":3,"names":["THREE","Water","OrbitControls","Sky","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","document","body","appendChild","domElement","controls","sky","scale","setScalar","add","waterGeometry","PlaneGeometry","water","textureWidth","textureHeight","waterNormals","TextureLoader","load","texture","wrapS","wrapT","RepeatWrapping","alpha","sunDirection","Vector3","sunColor","waterColor","distortionScale","fog","undefined","rotation","x","Math","PI","sphereGeometry","SphereGeometry","sphereMaterial","MeshStandardMaterial","color","roughness","metalness","sphere","Mesh","ambientLight","AmbientLight","directionalLight","DirectionalLight","sun","material","uniforms","value","copy","normalize","animate","requestAnimationFrame","y","sin","Date","now","update","render","addEventListener","aspect","updateProjectionMatrix"],"sources":["C:/Универ/АИС/Курсач/water-animation/src/index.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { Water } from 'three/examples/jsm/objects/Water';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { Sky } from 'three/examples/jsm/objects/Sky';\r\n\r\n// Сцена и камера\r\nconst scene = new THREE.Scene();\r\nconst camera = new THREE.PerspectiveCamera(55, window.innerWidth / window.innerHeight, 1, 20000);\r\ncamera.position.set(30, 30, 100);\r\n\r\n// Рендерер\r\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\ndocument.body.appendChild(renderer.domElement);\r\n\r\n// Орбитальные управления\r\nconst controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n// Сфера неба\r\nconst sky = new Sky();\r\nsky.scale.setScalar(10000);\r\nscene.add(sky);\r\n\r\n// Вода\r\nconst waterGeometry = new THREE.PlaneGeometry(10000, 10000);\r\nconst water = new Water(waterGeometry, {\r\n  textureWidth: 512,\r\n  textureHeight: 512,\r\n  waterNormals: new THREE.TextureLoader().load(\r\n    'https://threejs.org/examples/textures/waternormals.jpg',\r\n    texture => {\r\n      texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n    }\r\n  ),\r\n  alpha: 1.0,\r\n  sunDirection: new THREE.Vector3(),\r\n  sunColor: 0xffffff,\r\n  waterColor: 0x001e0f,\r\n  distortionScale: 3.7,\r\n  fog: scene.fog !== undefined\r\n});\r\nwater.rotation.x = -Math.PI / 2;\r\nscene.add(water);\r\n\r\n// Круглый объект (сфера) - исправленная версия\r\nconst sphereGeometry = new THREE.SphereGeometry(5, 32, 32);\r\nconst sphereMaterial = new THREE.MeshStandardMaterial({ \r\n  color: 0xff0000,\r\n  roughness: 0.1,\r\n  metalness: 0.5\r\n});\r\nconst sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\nsphere.position.set(0, 3, 0); // Поднимаем сферу выше, чтобы она была видна\r\nscene.add(sphere);\r\n\r\n// Освещение\r\nconst ambientLight = new THREE.AmbientLight(0x404040);\r\nscene.add(ambientLight);\r\n\r\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);\r\ndirectionalLight.position.set(100, 100, 50);\r\nscene.add(directionalLight);\r\n\r\nconst sun = new THREE.Vector3();\r\nsun.set(100, 100, 100);\r\nsky.material.uniforms['sunPosition'].value.copy(sun);\r\nwater.material.uniforms['sunDirection'].value.copy(sun).normalize();\r\n\r\n// Анимация\r\nfunction animate() {\r\n  requestAnimationFrame(animate);\r\n  water.material.uniforms['time'].value += 1.0 / 60.0;\r\n  \r\n  // Анимация сферы - плавает на поверхности\r\n  sphere.position.y = 3 + Math.sin(Date.now() * 0.001) * 0.5;\r\n  \r\n  controls.update();\r\n  renderer.render(scene, camera);\r\n}\r\n\r\nanimate();\r\n\r\n// Ресайз окна\r\nwindow.addEventListener('resize', () => {\r\n  camera.aspect = window.innerWidth / window.innerHeight;\r\n  camera.updateProjectionMatrix();\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}